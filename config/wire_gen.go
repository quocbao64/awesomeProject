// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package config

import (
	"awesomeProject/app/controller"
	"awesomeProject/app/repository"
	"awesomeProject/app/service"
	"github.com/google/wire"
)

// Injectors from injector.go:

func Init() *Initialize {
	gormDB := ConnectDB()
	customerRepositoryImpl := repository.CustomerRepositoryInit(gormDB)
	customerServiceImpl := service.CustomerServiceInit(customerRepositoryImpl)
	customerControllerImpl := controller.CustomerControllerInit(customerServiceImpl)
	authServiceImpl := service.AuthServiceInit(customerRepositoryImpl)
	authControllerImpl := controller.AuthControllerInit(authServiceImpl)
	initialize := NewInitialize(customerRepositoryImpl, customerServiceImpl, customerControllerImpl, authControllerImpl, authServiceImpl)
	return initialize
}

// injector.go:

var db = wire.NewSet(ConnectDB)

var customerSvcSet = wire.NewSet(service.CustomerServiceInit, wire.Bind(new(service.CustomerService), new(*service.CustomerServiceImpl)))

var customerRepoSet = wire.NewSet(repository.CustomerRepositoryInit, wire.Bind(new(repository.CustomerRepository), new(*repository.CustomerRepositoryImpl)))

var customerCtrlSet = wire.NewSet(controller.CustomerControllerInit, wire.Bind(new(controller.CustomerController), new(*controller.CustomerControllerImpl)))

var authSvcSet = wire.NewSet(service.AuthServiceInit, wire.Bind(new(service.AuthService), new(*service.AuthServiceImpl)))

var authCtrlSet = wire.NewSet(controller.AuthControllerInit, wire.Bind(new(controller.AuthController), new(*controller.AuthControllerImpl)))
